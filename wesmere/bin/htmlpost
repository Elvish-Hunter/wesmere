#!/usr/bin/python3
'''
HTML post-processor for codename "Wesmere"

codename Wesmere - Next-gen Wesnoth.org stylesheet
Copyright (C) 2017 - 2022 by Iris Morelle <shadowm@wesnoth.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, see <http://www.gnu.org/licenses/>.
'''

import argparse
import re
import socket
import io, os, sys

from pathlib import Path

# The simplified HTML 5 charset meta tag
CHARSET_META = '<meta charset="utf-8">'

# Resource prefix for production systems
RESOURCE_PREFIX = 'https://www.wesnoth.org' if socket.gethostname() != 'hanacore' else ''

def read_include(inc_path, minify_js=True):
    try:
        path = inc_path
        if minify_js and path.endswith(".js") and not path.endswith(".min.js"):
            basepath = path[:-len(".js")]
            if Path(basepath + ".min.js").is_file():
                path = basepath + ".min.js"
                #sys.stderr.write("use minified {1} for {0}\n".format(inc_path, path))
            else:
                sys.stderr.write("WARNING: no minified version of {1} found for {0}\n".format(inc_path, path))
        with open(path, "r", encoding="utf-8") as js:
            contents = js.read()
            pre_size = len(contents.encode("utf-8"))
        return contents
    except FileNotFoundError as err:
        sys.exit("Could not open Javascript include {0}, aborting.\n".format(err.filename))

def apply_transforms(line, minify_js=True):
    line = re.sub(r'<meta\s+http-equiv=[\'"]Content-Type[\'"].*>', CHARSET_META, line, flags=re.IGNORECASE)
    line = re.sub(r'@\s*HTMLPOST:PREFIX\s*@', RESOURCE_PREFIX, line)
    ex = re.compile(r'@\s*HTMLPOST:INCLUDE\s+([^\s]+)\s*@')
    match = ex.search(line)
    if match:
        inc_path = match.group(1)
        line = line[:match.start()] + read_include(inc_path, minify_js) + line[match.end():]
    return line


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', action='store_true', dest='debug',
                        help="show extra debugging information")
    parser.add_argument('-M, --no-minify', action='store_true', dest='no_minify',
                        help="skip auto-minifying or using externally-minified Javascript includes")
    parser.add_argument('input_file', metavar='INPUT_FILE',)
    parser.add_argument('output_file', metavar='OUTPUT_FILE', default='', nargs='?')
    #
    # Parse command line arguments
    #
    args = parser.parse_args()
    debug = args.debug
    input_file = args.input_file
    output_file = args.output_file
    minify = not args.no_minify
    if not output_file:
        output_file = input_file
    #
    # Do the thing
    #
    try:
        lines = ()
        with open(input_file, "r", encoding="utf-8") as inf:
            lines = inf.readlines()
        with open(output_file, "w", encoding="utf-8") as outf:
            for line in lines:
                outf.write(apply_transforms(line, minify))
    except FileNotFoundError as err:
        sys.exit("Could not open {0}, aborting.\n".format(err.filename))

# kate: indent-mode normal; encoding utf-8; space-indent on;
